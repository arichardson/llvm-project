; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --force-update
;; Check that we don't assert when computing KnownBits for DataLayouts where index size != AS(0) index size.
; RUN: opt -S -passes=instcombine --data-layout="pf200:128:128:128:64" < %s | FileCheck %s --check-prefix=CHECK128
;; NB: This (incorrectly) uses a 128-bit index which previously crashed.
; RUN: opt -S -passes=instcombine --data-layout="pf200:256:256:256:128" < %s | FileCheck %s --check-prefix=CHECK256

declare void @use(i32 addrspace(200)*)

define i32 addrspace(200)* @test(i8* %call) {
; CHECK128-LABEL: @test(
; CHECK128-NEXT:  entry:
; CHECK128-NEXT:    [[TMP0:%.*]] = bitcast i8* [[CALL:%.*]] to i32*
; CHECK128-NEXT:    [[TMP1:%.*]] = addrspacecast i32* [[TMP0]] to i32 addrspace(200)*
; CHECK128-NEXT:    call void @use(i32 addrspace(200)* [[TMP1]])
; CHECK128-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, i32 addrspace(200)* [[TMP1]], i64 41
; CHECK128-NEXT:    ret i32 addrspace(200)* [[ADD_PTR]]
;
; CHECK256-LABEL: @test(
; CHECK256-NEXT:  entry:
; CHECK256-NEXT:    [[TMP0:%.*]] = bitcast i8* [[CALL:%.*]] to i32*
; CHECK256-NEXT:    [[TMP1:%.*]] = addrspacecast i32* [[TMP0]] to i32 addrspace(200)*
; CHECK256-NEXT:    call void @use(i32 addrspace(200)* [[TMP1]])
; CHECK256-NEXT:    [[ADD_PTR:%.*]] = getelementptr inbounds i32, i32 addrspace(200)* [[TMP1]], i128 41
; CHECK256-NEXT:    ret i32 addrspace(200)* [[ADD_PTR]]
;
entry:
  %0 = bitcast i8* %call to i32*
  %1 = addrspacecast i32* %0 to i32 addrspace(200)*
  call void @use(i32 addrspace(200)* %1)
  %add.ptr = getelementptr inbounds i32, i32 addrspace(200)* %1, i64 41
  ret i32 addrspace(200)* %add.ptr
}
