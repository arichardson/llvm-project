; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --force-update
; RUN: opt -opaque-pointers=0 -passes=instsimplify -S < %s | FileCheck %s
; This was originally discovered because the FoldReinterpretLoadFromConst()
; transform generated a bad i128->i8 addrspace(200)* bitcast after merging
; LLVM 14. Check that we can correctly ignore this for non-zero values and also
; check that we can transform zero constants to null loads.
target datalayout = "E-m:e-pf200:128:128:128:64-i8:8:32-i16:16:32-i64:64-n32:64-S128-A200-P200-G200"


; Reduced from (clang/test/CodeGenCXX/cheri/single-cap-no-byval.cpp)
; union JsValue {
;   long l;
;   __uintcap_t x;
; };
; bool test() {
;   JsValue j{1};
;   JsValue j2 = throwException(nullptr, j);
;   return j.x == j2.x;
; }

@__const.nonzero = private addrspace(200) constant { i64, [8 x i8] } { i64 1, [8 x i8] zeroinitializer }
@__const.zero = private addrspace(200) constant { i64, [8 x i8] } { i64 0, [8 x i8] zeroinitializer }

; We can't fold non-zero reinterpreting loads of capabilities
define i8 addrspace(200)* @test_nozero() addrspace(200) {
; CHECK-LABEL: @test_nozero(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[FOO:%.*]] = load i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* bitcast ({ i64, [8 x i8] } addrspace(200)* @__const.nonzero to i8 addrspace(200)* addrspace(200)*), align 16
; CHECK-NEXT:    ret i8 addrspace(200)* [[FOO]]
;
entry:
  %foo = load i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* bitcast ({ i64, [8 x i8] } addrspace(200)* @__const.nonzero to i8 addrspace(200)* addrspace(200)*), align 16
  ret i8 addrspace(200)* %foo
}

; However, for an all zero value we should be able to return null
define i8 addrspace(200)* @test_zero() addrspace(200) {
; CHECK-LABEL: @test_zero(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    ret i8 addrspace(200)* null
;
entry:
  %foo = load i8 addrspace(200)*, i8 addrspace(200)* addrspace(200)* bitcast ({ i64, [8 x i8] } addrspace(200)* @__const.zero to i8 addrspace(200)* addrspace(200)*), align 16
  ret i8 addrspace(200)* %foo
}
